
// refer to : https://leetcode.com/problems/count-of-smaller-numbers-after-self/discuss/138154/The-C%2B%2B-merge-sort-template-for-pairs-'i'-'j'-problem
class Solution {
    
#define iterator vector<vector<int>>::iterator
void sort_count(iterator l, iterator r, vector<int>& count) {
    if(r - l <= 1)  return;
    // step 1. find the middle
    iterator m = l + ((r-l)>>1);
    // step 2. sort left and right subarray
    sort_count(l, m, count);
    sort_count(m, r, count);
    /* step 3. write your code here for counting the pairs (i, j).*/
    for(iterator i = l, j = m; i < m; i++)  {
        while (j < r && (*i)[0] > (*j)[0]) j++;
        count[(*i)[1]] += j - m;  // add numbers of 'j's to the indices of *i
    }
    // step 4. call built-ins(`inplace_merge`) to merge
    inplace_merge(l, m, r);

    
}
        
public:
    vector<int> countSmaller(vector<int>& nums) {
        vector<vector<int>> hold;
        for(int i = 0; i < nums.size(); i++)  {hold.push_back(vector<int>{nums[i], i});}    // "zip" the value and indice
        vector<int> ans(nums.size(), 0);
        sort_count(hold.begin(), hold.end(), ans);
        return ans;
    }
};
